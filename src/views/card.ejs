<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <!-- CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi"
      crossorigin="anonymous" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <!-- <link rel="stylesheet" href="../../css/learn.css"> -->
    <!-- JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3"
      crossorigin="anonymous"
      defer></script>
  </head>
  <style>
    html,
    body {
      height: 100%;
    }

    body {
      display: flex;
      align-items: center;
      padding-top: 40px;
      padding-bottom: 40px;
      background-color: #f5f5f5;
    }

    .form-signin {
      max-width: 330px;
      padding: 15px;
    }

    .form-signin .form-floating:focus-within {
      z-index: 2;
    }

    .form-signin input[type='email'] {
      margin-bottom: -1px;
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
    }

    .form-signin input[type='password'] {
      margin-bottom: 10px;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }

    #qi {
      transition: 0.3s;
      border-radius: 5px;
      height: 4vh;
      border: 2px solid rgb(202, 165, 0);
    }
    #qi:focus {
      outline: none;
    }

    .correct {
      border: 2px solid green;
      color: green;
    }
    .incorrect {
      border: 2px dashed crimson;
      scale: 1.1;
      color: #dc143c;
    }

    .gicon-btn {
        justify-content: center;
    }
  </style>
  <body class="text-center bg-warning">
    <main class="form-signin w-100 m-auto">
      <form>
        <div id="qc">
          <h1 class="h4 mb-3 fw-normal text-muted">Loading</h1>
        </div>

        <div class="">
          <input type="text" class="w-100" id="qi" placeholder="Type here" />
        </div>
        <br />
        <a class="w-100 btn btn-lg btn-primary" href="#" id="qb">
          <span class="material-symbols-outlined gicon-btn">
            playlist_add_check
          </span>
          Check
        </a>
        <p class="mt-5 mb-3 text-muted">&copy; Stht Studios 2022</p>
      </form>
    </main>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script defer>
      const socket = io();

      const qc = document.querySelector('#qc');
      const qt = qc.querySelector('h1');
      const qb = document.querySelector('#qb');
      const qi = document.querySelector('#qi');

      const inputChangeAnimationTime = 30;

      let questions = [
      ];

      let currentQId = 0;

      let canContinue = false;
      qi.onkeypress = (event) => {
        if (event.key === 'Enter') {
          event.preventDefault();
          if (qi.value === questions[currentQId].answer) {
            canContinue = true;
            qi.classList.remove('incorrect');
            qi.classList.add('correct');
          } else {
            canContinue = false;
            qi.classList.remove('correct');
            qi.classList.add('incorrect');
            qt.innerHTML = `Oops! Type \'<b>${questions[currentQId].answer}</b>\'`;
          }
          if (canContinue) {
            nextQuestion();
          }
        }
      };

      let prevVal = 0;

      function nextQuestion() {
        let random = Math.floor(Math.random() * questions.length);
        currentQId = random;
        if (!questions[0]) { qt.innerText = 'Unknown card'; return; } 
        qt.innerText = questions[random].text;
        console.log(currentQId, prevVal);
        if (currentQId === prevVal) { nextQuestion(); }
        prevVal = currentQId;
      }
      console.log(window.location.pathname);
      socket.emit('requestTerms', { cardId: parseInt('<%=cardId%>') });

      socket.on('loadTerm', ({ term }) => {
        console.log('Got', term);
        questions.push({ text: term.term, answer: term.definition });
      });

      let i = 0;
      let imax = 3;
      let dots = '';
      let a = setInterval(() => {
        i++;
        if (i > imax) { i = 0; dots = ''; }
        for (let j = 0; j < i; j++) {
            dots += '.';
        }
        qt.innerText = 'Waiting for card data' + dots;
      }, 500);

      setTimeout(() => {
        clearInterval(a);
        nextQuestion();
      }, 1000);
    </script>
  </body>
</html>

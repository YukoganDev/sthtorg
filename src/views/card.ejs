<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <!-- CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi"
      crossorigin="anonymous" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <!-- <link rel="stylesheet" href="../../css/learn.css"> -->
    <!-- JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3"
      crossorigin="anonymous"
      defer></script>
  </head>
  <style>
    html,
    body {
      height: 100%;
    }

    body {
      display: flex;
      align-items: center;
      padding-top: 40px;
      padding-bottom: 40px;
      background-color: #f5f5f5;
    }

    .form-signin {
      max-width: 330px;
      padding: 15px;
    }

    .form-signin .form-floating:focus-within {
      z-index: 2;
    }

    .form-signin input[type='email'] {
      margin-bottom: -1px;
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
    }

    .form-signin input[type='password'] {
      margin-bottom: 10px;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }

    #qi {
      transition: 0.3s;
      border-radius: 5px;
      height: 40px;
      border: 2px solid rgb(202, 165, 0);
    }
    #qi:focus {
      outline: none;
    }

    .correct {
      border: 2px solid green;
      color: green;
    }
    .incorrect {
      border: 2px dashed crimson;
      scale: 1.1;
      color: #dc143c;
    }

    .gicon-btn {
      vertical-align: middle;
    }

    @keyframes shake {
      10%,
      90% {
        transform: translate3d(-1px, 0, 0);
      }

      20%,
      80% {
        transform: translate3d(2px, 0, 0);
      }

      30%,
      50%,
      70% {
        transform: translate3d(-4px, 0, 0);
      }

      40%,
      60% {
        transform: translate3d(4px, 0, 0);
      }
    }

    .back-btn {
      position: absolute;
      margin: 1vw;

      left: 1vw;
      top: 2vh;
    }
  </style>
  <body class="text-center bg-warning">
    <main class="form-signin w-100 m-auto">
      <a href="/learn?fastload=1" class="btn btn-outline-secondary back-btn">Go back</a>
      <form>
        <div id="qc">
          <h1 class="h5 mb-3 fw-normal text-black-50" id="qf"><br /></h1>
          <h1 class="h4 mb-3 fw-normal text-muted" id="qq">Loading...</h1>
        </div>

        <div class="">
          <input type="text" class="w-100" id="qi" placeholder="Type here" />
        </div>
        <br />
        <a class="w-100 btn btn-lg btn-primary" href="#" id="qb">
          <span class="material-symbols-outlined gicon-btn">
            playlist_add_check
          </span>
          Check
        </a>
        <p class="mt-5 mb-3 text-muted">&copy; Stht Studios 2022</p>
      </form>
    </main>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script defer>
      const socket = io();

      const qc = document.querySelector('#qc');
      const qt = qc.querySelector('#qq');
      const qf = qc.querySelector('#qf');
      const qb = document.querySelector('#qb');
      const qi = document.querySelector('#qi');

      const inputChangeAnimationTime = 30;

      let questions = [];
      let questionsToGo = [];
      let currentQuestion = null;
      let round = 1;
      let ended = false;

      let canContinue = true;

      qi.onkeypress = (event) => {
        checkIfWrong();
        if (event.key === 'Enter') {
          event.preventDefault();
          check();
        }
      };

      qb.onclick = () => {
        check();
      };

      function checkIfWrong() {
        if (ended) {
          ended = false;
          nextQuestion(true);
        }
        if (!canContinue) {
          setTimeout(() => {
            if (!currentQuestion) {
              check();
              return;
            }
            if (qi.value === currentQuestion.answer) {
              qi.disabled = true;
              setTimeout(() => {
                check();
                qi.disabled = false;
              }, 800);
            }
          }, 0);
        }
      }

      function check() {
        qi.style.animation = '';
        if (!currentQuestion) {
          nextQuestion();
          return;
        }
        if (qi.value === currentQuestion.answer) {
          qf.innerHTML = 'Correct';
          canContinue = true;
          qi.classList.remove('incorrect');
          qi.classList.add('correct');
          qt.innerHTML += '<br />';
          if (questionsToGo.length <= 0) {
            console.log('ending...');
            end();
            return;
          }
        } else {
          qf.innerHTML = 'Oops!';
          canContinue = false;
          qi.classList.remove('correct');
          qi.classList.add('incorrect');
          qt.innerHTML = `Type: <br />\'<b>${currentQuestion.answer}</b>\'`;
          let q = questions.find((cq) => cq.id === currentQuestion.id);
          if (q) {
            q.wrong = true;
            console.log(questions, 'addsad');
          }
        }
        if (shouldContinue()) {
          nextQuestion();
        } else {
          qi.style.animation = 'shake .5s ease 1';
          currentQuestion.wrong = true;
        }

        setTimeout(() => {
          qi.select();
        }, 0);
      }

      function end() {
        ended = true;
        canContinue = false;
        let count = 0;
        let newQs = [];
        for (let q of questions) {
          if (q.wrong) {
            count++;
            q.wrong = false;
            newQs.push(q);
            questions.push(q);
            questionsToGo.push(q);
          }
        }
        console.log(questions);
        qf.innerHTML = `<br />`;
        qi.value = '';
        if (newQs.length <= 0) {
          qt.innerHTML = `Done. No bads!`;
          qi.disabled = true;
        } else {
          qt.innerHTML = `Round <b>${round}</b> complete, made <b>${count}</b> bads. Press any key to continue`;
          // questions = newQs;
          // questionsToGo = newQs;
          currentQuestion = null;
          round++;
          canContinue = true;
          setTimeout(() => {
            qi.select();
          }, 0);
          //nextQuestion();
        }
        console.log(newQs, '-> New array');
      }
      function shouldContinue() {
        return canContinue;
      }

      function nextQuestion(reset) {
          if (reset) {
            canContinue = false;
            setTimeout(() => {
              canContinue = true;
            }, 0);
          }
          if (!canContinue) {
            return;
          }
          console.log(questionsToGo, questionsToGo.length);
          let random = Math.floor(Math.random() * (questionsToGo.length - 1));
          currentQuestion = questionsToGo[random];
          console.log(currentQuestion);
          if (!questions[0]) {
            qt.innerHTML = '<p style="color: red;">Unknown or empty card. Retrying in 5 seconds...</p>';
            setTimeout(() => {
              window.location.reload();
            }, 5000);
            return;
          }
          qt.innerText = currentQuestion.text;
          questionsToGo.splice(random, 1);
      }
      socket.emit('requestTerms', { cardId: parseInt('<%=cardId%>') });

      socket.on('loadTerm', ({ term }) => {
        console.log('Got', term);
        questions.push({
          text: term.term,
          answer: term.definition,
          id: term.id,
          starred: term.star,
          wrong: false,
        });
        questionsToGo.push({
          text: term.term,
          answer: term.definition,
          id: term.id,
          starred: term.star,
          wrong: false,
        });
      });

      let i = 0;
      let imax = 3;
      let dots = '';
      let a = setInterval(() => {
        i++;
        if (i > imax) {
          i = 0;
          dots = '';
        }
        for (let j = 0; j < i; j++) {
          dots += '.';
        }
        qt.innerText = 'Waiting for card data' + dots;
      }, 300);

      function parseTerms() {
        let starredArr = [];
        for (let q of questions) {
          if (q.starred) {
            starredArr.push(q);
          }
        }
        console.log(starredArr);
        if (starredArr.length > 0) {
          questions = [];
          questionsToGo = [];
          for (let q of starredArr) {
            questions.push(q);
            questionsToGo.push(q);
          }
        }
      }

      setTimeout(() => {
        clearInterval(a);
        parseTerms();
        nextQuestion();
      }, 1000);
    </script>
  </body>
</html>

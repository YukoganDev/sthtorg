const socket=io(),loginBtn=document.querySelector("#login-btn");let user=document.getElementById("user").dataset.user;function loadCards(){document.querySelector("#start-btn").innerHTML='<span class="material-symbols-outlined"> cached </span>',setTimeout(()=>{document.querySelector(".info-div").hidden=!0,document.querySelector(".learn-div").hidden=!1},500)}console.log(`Logged in as ${user}`),user?(loginBtn.innerHTML=`Logout (${user})`,loginBtn.href="/logout"):loginBtn.innerHTML="Login",document.getElementById("start-btn").onclick=()=>{loadCards()};const renameCard=el=>{console.log(el.target)};function cancel(el,id){id?document.getElementById(id).remove():el.remove()}function sendPkt(pktName,pkt){socket.emit(pktName,pkt)}function generateId(length){for(var result="",characters="A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z-a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z",charactersLength=characters.length,i=0;i<length;i++)result+=characters.charAt(Math.floor(Math.random()*charactersLength));return result}function createCard({name:name,buttonName:buttonName='<span class="material-symbols-outlined gicon-btn"> school </span>',extraButtonName:extraButtonName='<span class="material-symbols-outlined gicon-btn"> edit </span>',buttonType:buttonType="secondary",extraButtonType:extraButtonType="secondary",space:space=!1,nameEditable:nameEditable=!1,buttonActions:buttonActions=null,extraButtonActions:extraButtonActions=null,card:card=null}){let btnGroup="btn-group";space&&(btnGroup="");let extraNameProps="";nameEditable&&(extraNameProps='contentEditable = "true" style="background-color: #CCC;"'),console.log(card);let id=generateId(10),buttonAction="";buttonAction=buttonActions?`(${buttonActions})('${id}');`:`learn(${card.id});`;let extraButtonAction="";extraButtonAction=extraButtonActions?`(${extraButtonActions})('${id}');`:`edit(${card.id});`,console.log(id);let el=`\n        <div class="col" id="${id}">\n                <div class="card shadow-sm text-bg-light">\n                  <div class="card-body align-items-center">\n                    <p class="card-text ${id}" ${extraNameProps}>\n                      ${name}\n                      \n                    </p>\n                    \n                    <div\n                      class="justify-content-between align-items-center"\n                    >\n                      <div class="${btnGroup} align-self-end">\n                        <button\n                          type="button"\n                          onclick="${buttonAction}"\n                          class="btn btn-sm btn-outline-${buttonType}"\n                        >\n                          ${buttonName}\n                        </button>\n                        <button\n                          type="button"\n                          onclick="${extraButtonAction}"\n                          class="btn btn-sm btn-outline-${extraButtonType}"\n                        >\n                          ${extraButtonName}\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n          `;if(document.querySelector(".cards").insertAdjacentHTML("beforeend",el),nameEditable){let node=document.querySelector(`.${id.toString()}`);node.focus(),selectText(node)}}let currentCardId;function setCardId(id){"number"!=typeof id?console.error(id,"is not a number"):currentCardId=id}function getCardId(){return currentCardId}function edit(cardId){setCardId(cardId),console.log("edit"),socket.emit("requestTerms",{cardId:cardId}),document.querySelector("#terms").hidden=!1,document.querySelector(".cards").hidden=!0}function learn(cardId){console.log("Opening card..."),window.location.href="/card/"+cardId}function selectText(node){let finalNode=node;if(node||(finalNode=document.getElementById("empty")),document.body.createTextRange){const range=document.body.createTextRange();range.moveToElementText(finalNode),range.select()}else if(window.getSelection){const selection=window.getSelection(),range=document.createRange();range.selectNodeContents(finalNode),selection.removeAllRanges(),selection.addRange(range)}else console.warn("Could not select text: Unsupported browser")}function cardRenameFieldTyping(event){if("Enter"===event.key){event.preventDefault(),document.querySelector("#cardRenameField").style.opacity=0;let text=document.querySelector("#cardRenameField").value;document.querySelector("#cardRenameField").value="Saving...",setTimeout(()=>{document.querySelector("#cardRenameField").hidden=!0,sendPkt("renameCard",{cardId:getCardId(),name:text})},300)}}function removeTerm(el){if(window.confirm("Are you sure? This term will be removed forever")){let mainEl=el.parentNode;mainEl.style.animation="error-and-delete 1s ease 1",socket.emit("removeTerm",{termId:parseInt(mainEl.querySelector("#termDiv").dataset.termid),cardId:parseInt(mainEl.querySelector("#termDiv").dataset.cardid)}),setTimeout(()=>{mainEl.remove()},1e3)}}function updateTerm(el){sendPkt("updateTerm",{el:el})}function createTerm({term:term,definition:definition,cardId:cardId,id:id,star:star}){let starIconStr="toggle_off",starColor="";star&&(starIconStr="toggle_on",starColor="rgb(243, 179, 16)");let el=`\n        <a\n              href="#"\n              class="list-group-item list-group-item-action d-flex gap-3 py-3 item fullwidth termItem"\n              aria-current="true"\n            >\n              <div class="d-flex gap-2 w-100 btn-group justify-content-between fullwidth">\n                <div style="word-wrap: break-word;" id="termDiv" data-cardId="${cardId}" data-termId="${id}">\n                  <p class="mb-1 term" onfocus="selectText(this);" onkeypress="preventEnter(event);">\n                    ${term}\n                  </p>\n                  <hr />\n                  <p class="mb-0 opacity-75 definition" onfocus="selectText(this);" onkeypress="preventEnter(event);">\n                    ${definition}\n                  </p>\n                </div>\n              <div>\n                <div class="btn-group-stht">\n                  <button class="edit-btn gicon-btn" onclick="editTerm(this.parentNode);">\n                    <span class="material-symbols-outlined edit">\n                      edit\n                    </span>\n                  </button>\n                  <button class="delete-btn gicon-btn">\n                    <span class="material-symbols-outlined delete" onclick="removeTerm(this.parentNode.parentNode.parentNode.parentNode);">delete</span>\n                  </button>\n                  <button class="star-btn gicon-btn">\n                    <span class="material-symbols-outlined star" style="color: ${starColor};" onclick="starTerm(this.parentNode.parentNode.parentNode.parentNode.parentNode);">${starIconStr}</span>\n                  </button>\n                  </div>\n                </div>\n              </div>\n            </a>\n        `;return document.querySelector(".terms").insertAdjacentHTML("beforeend",el),{term:term,definition:definition,cardId:cardId,id:id,star:star}}function starTerm(el){console.log(el);let starSpan=el.querySelector(".star");if("toggle_off"===starSpan.innerHTML)return sendPkt("starTerm",{id:parseInt(el.querySelector("#termDiv").dataset.termid)}),starSpan.innerHTML="toggle_on",void(starSpan.style.color="rgb(243, 179, 16)");sendPkt("unstarTerm",{id:parseInt(el.querySelector("#termDiv").dataset.termid)}),starSpan.innerHTML="toggle_off",starSpan.style.color=""}document.querySelector(".create-btn").onclick=()=>{createCard({name:"Name this card...",nameEditable:!0,buttonName:"Cancel",extraButtonName:"Save",buttonType:"danger",extraButtonType:"success",space:!0,buttonActions:id=>{document.getElementById(id).remove()},extraButtonActions:id=>{console.log(document.getElementById(id).querySelector(".card-text").innerText),sendPkt("saveCard",{name:document.getElementById(id).querySelector(".card-text").innerText}),document.getElementById(id).remove()}})},socket.on("loadCard",({card:card})=>{createCard({name:card.name,card:card})}),socket.on("loadTerm",({term:term})=>{console.log("Got",term),createTerm(term)}),document.querySelector("#create-term-btn").onclick=()=>{getCardId()?sendPkt("saveTerm",{term:"hello",definition:"bonjour",cardId:getCardId()}):console.error("Error while saving term")},document.querySelector("#delete-card-btn").onclick=el=>{window.confirm("Are you sure? The card will be removed forever")&&sendPkt("removeCard",{cardId:getCardId()})},document.querySelector("#rename-card-btn").onclick=el=>{document.querySelector("#cardRenameField").hidden=!1,setTimeout(()=>{document.querySelector("#cardRenameField").style.opacity=1,document.querySelector("#cardRenameField").focus()},1)},socket.on("reloadCards",()=>{window.location.search.fastload=1}),socket.on("error",msg=>{alert(msg)});const editTerm=el=>{let mainElement=el.parentNode.parentNode.parentNode,termDiv=mainElement.querySelector("#termDiv");if("done"===el.querySelector("span").innerText)return sendPkt("updateTerm",{cardId:parseInt(termDiv.dataset.cardid),term:el.parentNode.parentNode.querySelector(".term").innerText,definition:el.parentNode.parentNode.querySelector(".definition").innerText,termId:parseInt(termDiv.dataset.termid)}),mainElement.style.animation="success 1s ease 1",termDiv.querySelectorAll("p").forEach(cn=>{cn.contentEditable=!1,cn.style="",selectText(null)}),void(el.querySelector("span").innerText="edit");termDiv.querySelectorAll("p")[0].focus(),mainElement.style.animation="",termDiv.querySelectorAll("p").forEach(cn=>{cn.contentEditable=!0,cn.style="background-color: #CCC; padding: 3px;"}),el.querySelector("span").innerText="done"};function preventEnter(event){"Enter"===event.key&&event.preventDefault()}const urlSearchParams=new URLSearchParams(window.location.search),params=Object.fromEntries(urlSearchParams.entries());params&&"1"===params.fastload&&loadCards();